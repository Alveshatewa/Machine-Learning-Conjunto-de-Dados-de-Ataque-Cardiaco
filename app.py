import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise de Ataques Card√≠acos", layout="wide")

# T√≠tulo principal
st.title(" An√°lise de Conjuntos de Dados de Ataques Card√≠acos com Machine Learning usando o Algoritmo (KNN)")
st.markdown("Plataforma para an√°lise e predi√ß√£o de Conjuntos de Dados de Ataques Card√≠acos usando algoritmos de Machine Learning.")

# Carregamento e pr√©-processamento dos dados
@st.cache_data
def load_data():
    df = pd.read_csv("Medicaldataset.csv")
    df['Result'] = df['Result'].map({'positive': 1, 'negative': 0})
    return df

df = load_data()

# Fun√ß√£o para treinar modelo
@st.cache_resource
def train_model():
    X = df.drop('Result', axis=1)
    y = df['Result']

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.3, random_state=42, stratify=y
    )

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    knn = KNeighborsClassifier(n_neighbors=5)
    knn.fit(X_train_scaled, y_train)
    y_pred = knn.predict(X_test_scaled)

    metrics = {
        "y_test": y_test,
        "y_pred": y_pred,
        "accuracy": accuracy_score(y_test, y_pred),
        "precision": precision_score(y_test, y_pred),
        "recall": recall_score(y_test, y_pred),
        "confusion": confusion_matrix(y_test, y_pred),
        "classification_report": classification_report(y_test, y_pred, target_names=["Negativo", "Positivo"])
    }
    return knn, metrics

# Sidebar com bot√µes
st.sidebar.title("üîç Navega√ß√£o")
action = st.sidebar.radio("Escolha uma ac√ß√£o:", [
    "üìÑ Exibir Dataset",
    "üìä Exibir Distribui√ß√£o",
    "üìà Mostrar Resultados",
    "üìä Avaliar Modelo",
    "‚ÑπÔ∏è Sobre a Aplica√ß√£o",
    "üì¨ Contacto"
])

# A√ß√µes do sidebar
if action == "üìÑ Exibir Dataset":
    st.subheader("üìÑ Dataset Completo")
    st.dataframe(df)
    st.write("**Dimens√£o:**", df.shape)
    st.write("**Valores Ausentes:**")
    st.write(df.isnull().sum())

elif action == "üìä Exibir Distribui√ß√£o":
    st.subheader("üìä Distribui√ß√£o dos Casos de Ataque Card√≠aco")
    fig, ax = plt.subplots()
    sns.countplot(x='Result', data=df, ax=ax)
    ax.set_xlabel("Resultado (0 = Negativo, 1 = Positivo)")
    ax.set_ylabel("Quantidade")
    ax.set_title("Distribui√ß√£o dos Casos")
    st.pyplot(fig)



elif action == "üìà Mostrar Resultados":
    st.subheader("üìà Relat√≥rio de Classifica√ß√£o")
    _, metrics = train_model()
    st.code(metrics["classification_report"])

elif action == "üìä Avaliar Modelo":
    st.subheader("üìä Avalia√ß√£o do Modelo com M√©tricas de Desempenho")
    _, metrics = train_model()

    col1, col2 = st.columns(2)
    with col1:
        fig1, ax1 = plt.subplots()
        ax1.bar(['Acur√°cia'], [metrics['accuracy']], color='green')
        ax1.set_ylim(0, 1)
        ax1.set_title("Acur√°cia do Modelo")
        st.pyplot(fig1)
        st.markdown("üîπ **Acur√°cia**: indica a propor√ß√£o total de previs√µes corretas.")

    with col2:
        fig2, ax2 = plt.subplots()
        ax2.bar(['Precis√£o'], [metrics['precision']], color='blue')
        ax2.set_ylim(0, 1)
        ax2.set_title("Precis√£o do Modelo")
        st.pyplot(fig2)
        st.markdown("üîπ **Precis√£o**: quantos dos positivos preditos s√£o realmente positivos.")

    col3, col4 = st.columns(2)
    with col3:
        fig3, ax3 = plt.subplots()
        ax3.bar(['Recall'], [metrics['recall']], color='orange')
        ax3.set_ylim(0, 1)
        ax3.set_title("Recall do Modelo")
        st.pyplot(fig3)
        st.markdown("üîπ **Recall**: quantos dos positivos reais foram corretamente identificados.")

    with col4:
        fig4, ax4 = plt.subplots()
        sns.heatmap(metrics["confusion"], annot=True, fmt="d", cmap="Blues", ax=ax4,
                    xticklabels=["Negativo", "Positivo"],
                    yticklabels=["Negativo", "Positivo"])
        ax4.set_title("Matriz de Confus√£o")
        ax4.set_xlabel("Previsto")
        ax4.set_ylabel("Real")
        st.pyplot(fig4)
        st.markdown("üîπ **Matriz de Confus√£o**: mostra os acertos e erros do modelo.")

elif action == "‚ÑπÔ∏è Sobre a Aplica√ß√£o":
    st.subheader("‚ÑπÔ∏è Sobre")
    st.markdown("""
    O diagn√≥stico precoce de ataques **card√≠acos** √© fundamental para salvar vidas e direcionar rapidamente pacientes para tratamentos adequados. No entanto, muitas institui√ß√µes m√©dicas enfrentam limita√ß√µes de tempo e recursos humanos para realizar an√°lises minuciosas dos dados cl√≠nicos. Isso pode levar a diagn√≥sticos tardios ou incorretos. Diante disso, surge a necessidade de uma solu√ß√£o automatizada, confi√°vel e de f√°cil aplica√ß√£o que auxilie os profissionais da sa√∫de na detec√ß√£o precoce de poss√≠veis infartos.
    
    A solu√ß√£o proposta baseia-se na cria√ß√£o de um modelo de classifica√ß√£o supervisionada utilizando o algoritmo KNN (K-Nearest Neighbors), aplicado a um conjunto de dados estruturado com informa√ß√µes cl√≠nicas de pacientes. O objetivo √© prever, com base nos atributos fornecidos como: **press√£o arterial, idade, colesterol e entre outros**, se um paciente est√° propenso a sofrer um ataque card√≠aco **(classe positiva)** ou n√£o **(classe negativa)**. 
    
    Com base nisto, esta aplica√ß√£o permite:

    - Visualizar o dataset
    - Analisar a distribui√ß√£o dos dados
    - Executar o modelo KNN
    - Avaliar o desempenho com gr√°ficos explicativos
    - Entrar em contacto com o autor
    """)
    
elif action == "üì¨ Contacto":
    st.subheader("üì¨ Contactos")
    st.markdown("""
     Dispon√≠vel para contacto por meio das seguintes redes sociais: 
     
    - [LinkedIn](https://www.linkedin.com/in/alveshatewa)  
    - [WhatsApp](https://wa.me/+244946602461)
    - [GitHub](https://github.com/alveshatewa)
    
     Desenvolvido por **Alves Hatewa** -  Estudante do Curso de Ci√™ncias da Computa√ß√£o.
    """)
